from Crypto.Cipher import AES
from Crypto.Util.number import GCD
from Crypto.Util.Padding import unpad
from hashlib import sha256

n = 702806340521506617228738088149675776508513298178948395659141381292396277564183386793148696726252030247049271911683309841734047694075415115318244508691980419634336501090854569674179153888414001095295759305409217999881655193413643747350719031206389646068603834319574658362492699721698087583054265498028209591022781017990478405230826555236195067741691550724608130338635981207812195692530188413824373084516314683835845071395261639397807928955020549878249088021888578437864579283992545295854783527091698320204021437420270333771197126676424687497147193847968236139943713485992231804366301001861264293932966197448354107329493404802990914798941292068613683381330254611926528150963904439403641969965410271628142303194424290532294652160771281083435911970037362461591304851011232925914289372231123851882298621727016951821672336080865682023093712535412940978277920785551235656056853591115526680545657260961805120039575474379783804293047069534853047556119529972561251235513250036105963983491337950555133506092002907312349601659805397653731835519921712932256251499667085156125183398319805589297545803456349883951300501369408000837998511716579478217367279127757335155708113132431993969673883235463205235262873758038510369930316791260958370551361777 
b1 = 50542167618027424301472456654722571259432960481158486142891311169879155560886928696589135367822459590679395053496215585866235272970125624814827312373361502873233321041160010494926049584492979977878412066528381576918122253106568705631107791783350483038276108020070037282672274020626580557568527612594660678772557783847137443571497550127429472295776020560778304383677576062657895888156927690562598334822919801066993733712008233440552645655702522467761195092511528374754444016700041310476160777867411557079276229542312436390698720270257676564164236485989175965979191816108137237148691335668523357484780057746823915725366646988480711701061695456031763441068633814919662748773253379731299419496731640498316446788367615823040832177185356427715516253655732220386096358579191500454278372215501035298371335287463292052682637425523791986321710574597761277535630113150254933795753229033651743620987493776632053420526890167421046136319954773983357487467400044661251279853170012135984644939954928257579649427532586094137036025225141085190794055928555778707418748313753866359018933283922370404041760218950242283547410499950705857317345636307063468917654507030516580710177640758714778013703053556223042157001428559357777873867170052026501777650495 
b2 = 445881802627526831906772826700126968231990262407357661436583482108942643486065939165105304330493556988272150442181558637006263781421466737960284119905294452155694445644709562146570490165921656435745119705295346919539409394964611225722370873033215583978516643574907538810309698886772255038499315825551247093283303270867524240911813958330055677122296959894348811061155211689045501148891315488797677694090125330461154042695458683000632665232583134004306568918877309450754446924694699514200133612459859613426052981057392142383453303758316438204025052642578842817973467129885212114491503896221991520555133232684856589684315912665553855682248911366221142719311169914801042804599981835929791611990363648281252778379152237662118037026364705731092140319365997860994390232092529900255934717239836541586413057068604332545317356813244916073263728964970919947244959383141509660885095536862233529003514661057759836960415664686299665564227596162744815463882249977194305390054849651383942821640113196129347854970042898693168816745719397484516757704467958960472775333453488799805964925342821638906122522952476381367482584529516253821896486869318990947947723698686829722779294854178181041232282929259557802895273537016369882907391308807155903964966491 
e1 = 178215518583488137161082119408549459565691328811015816177647753059378176875004567749043212872086518865983634119225477390094360168209896207626520875634347873154812528591547291545515831252910717516594267764893743534776214207778113336090186019751686294370540983883134049743044197394614138403424024099483569715523 
e2 = 118252858654980781957753683307168135974019966886232501899585868816953143962301433183484249166963450137626196802321474104405670979189576839208679136586433338558790235572598815023044186298204671676500303333983317643704802434250696465863779818324736999470099486810942072697422525368914256966732881029185096200186 

# b1 = (11*p + 13*q)^e1 (mod n)
# b2 = (17*p + 19*q)^e2 (mod n)
# 
# x1 = b1^e2 = (11*p + 13*q)^e1*e2 (mod n) 
# set e1*e2 = u, 11*p = p', 13*q = q'
# x1 = sum from i=0 to u, uCi*p'^(u-i)*q'^i (mod n)
# = p'^u + ..... + q'^u (mod n) = p'^u + q'^u (mod n)
# = (11*p)^e1*e2 + (13*q)^e1*e2 (mod n) (because n = p*q)
# x2 = b2^e1 = (17*p + 19*q)^e1*e2 (mod n)
# = (17*p)^e1*e2 + (19*q)^e1*e2 (mod n) for the same reason
# 
# set y1 = 19^e1*e2 (mod n) and y2 = 13^e1*e2 (mod n)
# then d = y1*x1 - y2*x2 (mod n) = (((11*19*p)^e1*e2 - (13*19*q)^e1*e2) - ((17*13*p)^e1*e2 - (13*19*q)^e1*e2)) (mod n)
# = (11*19 - 17*13)*p (mod n)
# gcd(11*19 - 17*13, n) = 1
# therefore, p = gcd(d, n), q = n // p
#
#

x1 = pow(b1, e2, n)
x2 = pow(b2, e1, n)
y1 = pow(19, e1*e2, n)
y2 = pow(13, e1*e2, n)
d = (y1*x1 - y2*x2) % n

p = GCD(d, n)
q = n // p
assert p*q == n

ct = bytes.fromhex(
    'c4d6c055c5cd445100f78bed7bf442bd5fb4636fd0021076b4a32e7846e0ad868a3305cf8e6a64b7afc8c16875f3d4eda18a06b441570ea6a427f3cc1f2be851')
key = sha256(bytes.fromhex(hex(p)[2:])).digest()
IV = bytes.fromhex(hex(q)[2:])[:16]
cipher = AES.new(key, AES.MODE_CBC, iv=IV)
print(unpad(cipher.decrypt(ct), 16).decode())
